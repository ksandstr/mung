#ifndef _L4X2_IDL
#define _L4X2_IDL

#include <muidl.idl>


module L4X2
{

native l4_word_t;
typedef l4_word_t word;
typedef l4_word_t ThreadId;

native l4_mapgrantitem_t;
typedef l4_mapgrantitem_t MapGrantItem;

native l4_fpage_t;
typedef l4_fpage_t Fpage;

native l4_time_t;
typedef l4_time_t Time;


[StubPrefix(__l4x2)]
interface FaultHandler
{
	[TagMask(0xfff00000), Label(0xffe0)]
	void handle_fault(
		[MR(1)] in word faddr,
		[MR(2)] in word fip,
		[map] out MapGrantItem page)
			raises(muidl::NoReply);
};


/* TODO: move per-arch stuff into per-arch files. */
[StubPrefix(__l4x2)]
interface X86IOFaultHandler
{
	[Label(0xff86)]
	void handle_x86_io_fault(
		[MR(1)] in Fpage fault,
		[MR(2)] in word fault_ip,
		[map] out MapGrantItem ports)
			raises(muidl::NoReply);
};


[StubPrefix(__l4x2)]
interface ExceptionHandler
{
	[TagMask(0xfff00000), Label(0xffc0)]
	void sys_exception(
		[MR(1)] inout word eip,
		[MR(2)] inout word eflags,
		[MR(3)] inout word exception_no,
		[MR(4)] inout word errorcode,
		[MR(5)] inout word edi,
		[MR(6)] inout word esi,
		[MR(7)] inout word ebp,
		[MR(8)] inout word esp,
		[MR(9)] inout word ebx,
		[MR(10)] inout word edx,
		[MR(11)] inout word ecx,
		[MR(12)] inout word eax)
			raises(muidl::NoReply);

	[TagMask(0xfff00000), Label(0xffb0)]
	void arch_exception(
		[MR(1)] inout word eip,
		[MR(2)] inout word eflags,
		[MR(3)] inout word exception_no,
		[MR(4)] inout word errorcode,
		[MR(5)] inout word edi,
		[MR(6)] inout word esi,
		[MR(7)] inout word ebp,
		[MR(8)] inout word esp,
		[MR(9)] inout word ebx,
		[MR(10)] inout word edx,
		[MR(11)] inout word ecx,
		[MR(12)] inout word eax)
			raises(muidl::NoReply);
};


/* the preëmption message, sent to a thread's ExceptionHandler at async
 * preëmpt when s ∧ ¬d.
 */
[StubPrefix(__l4x2)]
interface PreemptHandler
{
	[TagMask(0xfff00000), Label(0xffd0)]
	oneway void preempt_fault(
		[MR(1)] in word clock_hi,
		[MR(2)] in word clock_lo);
};

}; // module L4X2

#endif
